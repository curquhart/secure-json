stages:
  - JDK Test
  - Documentation

testJava7JDK:
  tags:
    - docker
  image: gradle:4.10-jdk7
  stage: JDK Test
  script:
    - unset SONAR_TOKEN
    - gradle --no-daemon test

testJava8JDK:
  tags:
    - docker
  image: gradle:4.10-jdk8
  stage: JDK Test
  script:
    - unset SONAR_TOKEN
    - ./gradlew --no-daemon test

testJava10JDK:
  tags:
    - docker
  image: gradle:4.10-jdk10
  stage: JDK Test
  script:
    - unset SONAR_TOKEN
    - ./gradlew --no-daemon check
    - ./gradlew --no-daemon jar shadowJar
  artifacts:
    paths:
      - build/libs

testJava11JDK:
  tags:
    - docker
  image: gradle:4.10-jdk11
  stage: test
  script:
    - unset SONAR_TOKEN
    - ./gradlew wrapper --gradle-version=5.0-20181110000025+0000
    - ./gradlew --no-daemon check

testJava12ExperimentalJDK:
  tags:
  - docker
  image: openjdk:12-ea-jdk
  stage: JDK Test
  allow_failure: true
  script:
  - unset SONAR_TOKEN
  - ./gradlew wrapper --gradle-version=5.0-20181110000025+0000
  - ./gradlew --no-daemon check

javadocs:
  # we aren't doing anything with these here, but we use them in the Maven releases, so we want the pipeline to run them
  # to verify no errors on a regular basis.
  tags:
  - docker
  image: gradle:4.10-jdk10
  stage: Documentation
  script:
  - unset SONAR_TOKEN
  - ./gradlew --no-daemon javadoc

verifyJSONTestSuiteJava7JRE:
  tags:
    - docker
  image: java:7-jre
  stage: test
  script:
    - unset SONAR_TOKEN
    - ./gradlew --no-daemon verifyJSONTestSuite

sonarqube:
  tags:
    - docker
  image: gradle:4.10-jdk10
  stage: test
  only:
    - master
  script:
    - ./gradlew --no-daemon sonarqube -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORGANIZATION -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
