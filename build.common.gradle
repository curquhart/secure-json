apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def VERSION_SNAPSHOT = 'SNAPSHOT'

repositories {
    jcenter()
}

sourceSets {
    shared {
        java {
            srcDirs 'src/shared/java'
        }
    }

    cli {
        java {
            srcDirs 'src/cli/java'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.shared.output
        runtimeClasspath += sourceSets.shared.output
    }

    test {
        java {
            compileClasspath += sourceSets.shared.output
            runtimeClasspath += sourceSets.shared.output
        }
    }
}

dependencies {
    compile 'io.github.novacrypto:SecureString:2018.10.06@jar'
    cliCompile 'io.github.novacrypto:SecureString:2018.10.06@jar'
    testCompile 'org.testng:testng:6.14.3'
    testRuntime 'org.testng:testng:6.14.3'
}

jacoco {
    toolVersion = "0.8.1"
}

checkstyle {
    configFile file("config/checkstyle.xml")
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.75
            }
        }
    }
}

test {
    useTestNG()
}

// don't verify until the report has been generated so that we can have a visual representation.
jacocoTestCoverageVerification.mustRunAfter jacocoTestReport

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

group = 'com.chelseaurquhart'
def versionNumber = '1.0.1'
if (project.hasProperty('release')) {
    version = versionNumber
} else {
    version = "${versionNumber}-${VERSION_SNAPSHOT}"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'secure-json'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'SecureJSON'
                description = 'A secure JSON library.'
                url = 'https://github.com/curquhart/secure-json/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'chelsea'
                        name = 'Chelsea Urquhart'
                        email = 'chelsea.urquhart@rocketsimplicity.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/curquhart/secure-json.git'
                    developerConnection = 'scm:git:ssh://github.com/curquhart/secure-json.git'
                    url = 'https://github.com/curquhart/secure-json/'
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty('release')) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            } else {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            }
            credentials {
                username = project.properties['sonatypeUsername']
                password = project.properties['sonatypePassword']
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    options.addBooleanOption('html5', true)
}

clean {
    delete buildDir
}

task cloneJSONTestSuite(type: Exec) {
    ext {
        cloneDir = "${buildDir}/JSONTestSuite"
    }

    commandLine 'git', 'clone', 'https://github.com/nst/JSONTestSuite', ext.cloneDir
    outputs.files(cloneDir)
}
cloneJSONTestSuite.mustRunAfter clean

task verifyJSONTestSuite(dependsOn: [cloneJSONTestSuite, compileCliJava]) {
    def jsonFiles = fileTree("${cloneJSONTestSuite.ext.cloneDir}/test_parsing/")
    inputs.files jsonFiles
    doLast {
        javaexec {
            systemProperties['verifyRunMode'] = 'batch'
            classpath sourceSets.cli.runtimeClasspath
            main = 'com.chelseaurquhart.securejson.Verify'
            args = jsonFiles
        }
    }
}
