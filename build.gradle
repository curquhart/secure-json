buildscript {
    ext.shadowEnabled = JavaVersion.current().java8Compatible
    ext.sonarQubeEnabled = JavaVersion.current().java8Compatible
    ext.isJava12 = JavaVersion.current().getMajorVersion() == '12'
    ext.spotBugsEnabled = JavaVersion.current().java8Compatible && !isJava12
    ext.consoleCoverageReporterEnabled = JavaVersion.current().java8Compatible && !JavaVersion.current().java11Compatible
    ext.checkStyleEnabled = !JavaVersion.current().java11Compatible

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    if (spotBugsEnabled) {
        dependencies {
            classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.4"
        }
    }
    if (consoleCoverageReporterEnabled) {
        dependencies {
            classpath "gradle.plugin.com.github.ksoichiro:gradle-console-reporter:0.5.0"
        }
    }

    if (shadowEnabled) {
        dependencies {
            classpath "com.github.jengelman.gradle.plugins:shadow:4.0.2"
        }
    }

    if (sonarQubeEnabled) {
        dependencies {
            classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        }
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'pmd'

if (checkStyleEnabled) {
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = "8.14"
        configFile file("config/checkstyle.xml")
    }
}

def versionNumber = rootProject.file('version.txt').text.trim()

def VERSION_SNAPSHOT = 'SNAPSHOT'

repositories {
    mavenCentral()
}

sourceSets {
    shared {
        java {
            srcDirs 'src/shared/java'
        }
        compileClasspath += sourceSets.main.output
    }

    cli {
        java {
            srcDirs 'src/cli/java'
        }
        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.shared.output
    }

    test {
        java {
            compileClasspath += sourceSets.shared.output
            runtimeClasspath += sourceSets.shared.output
        }
    }

    if (JavaVersion.current().java9Compatible) {
        java9 {
            java {
                srcDirs = ['src/main/java9']
                compileClasspath += sourceSets.main.output
            }
        }
    }
}

if (consoleCoverageReporterEnabled) {
    apply plugin: 'com.github.ksoichiro.console.reporter'
}

if (sonarQubeEnabled) {
    apply plugin: 'org.sonarqube'
}

if (spotBugsEnabled) {
    apply plugin: 'com.github.spotbugs'

    spotbugs {
        includeFilter = file("config/findbugs.exclude.xml")
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

if (shadowEnabled) {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        from sourceSets.cli.output
        from sourceSets.shared.output
    }
}

def OLD_JRE_VERSION
if (isJava12) {
    OLD_JRE_VERSION="1.7"
} else {
    OLD_JRE_VERSION="1.6"
}

sourceCompatibility = OLD_JRE_VERSION
targetCompatibility = OLD_JRE_VERSION

if (JavaVersion.current().java9Compatible) {
    compileJava {
        options.compilerArgs.addAll(['--release', OLD_JRE_VERSION.replaceAll('^1\\.', '')])
    }

    compileJava9Java {
        sourceCompatibility = 9
        targetCompatibility = 9
        options.compilerArgs.addAll(['--release', '9'])
    }

    jar {
        into('META-INF/versions/9') {
            from sourceSets.java9.output
        }

        manifest {
            attributes(
                    "Multi-Release": true
            )
        }
    }

    test {
        jvmArgs '--illegal-access=deny'
    }

    def bootstrapPath
    if (project.hasProperty('rt')) {
        bootstrapPath = files(project.getProperty('rt'))
    } else if (JavaVersion.current().java8Compatible) {
        def stdOut = new ByteArrayOutputStream()
        try {
            exec {
                commandLine '/usr/libexec/java_home', '-v', OLD_JRE_VERSION
                standardOutput = stdOut
            }

            bootstrapPath = files("${stdOut.toString().trim()}/jre/lib/rt.jar")
        } catch (final Exception e) {
            println "Failed to get Java ${OLD_JRE_VERSION} home. Bootstrap path will not be set: ${e.getMessage()}"
        }
    }

    if (bootstrapPath) {
        project.tasks.withType(AbstractCompile, { ac ->
            if (ac.sourceCompatibility == OLD_JRE_VERSION) {
                println "Using bootstrap path: ${bootstrapPath.join(' ')} for ${ac.name}"
                ac.options.bootstrapClasspath = bootstrapPath
            }
        })
    }
}

dependencies {
    testCompile 'org.testng:testng:6.14.3'
    compile group: 'net.jodah', name: 'typetools', version: '0.5.0'
    testCompile group: 'net.jodah', name: 'typetools', version: '0.5.0'
}

jacoco {
    toolVersion = "0.8.2"
}

pmd {
    consoleOutput = true
    ruleSets = []

    toolVersion = "6.8.0"
    ruleSetFiles = files("config/pmd.xml")
}

project.tasks.withType(AbstractCompile, { ac ->
    ac.options.compilerArgs << '-Xlint:all'
    ac.options.compilerArgs << '-Xlint:-options'
    ac.options.compilerArgs << '-Werror'
})

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }
}

test {
    useTestNG()
}

// don't verify until the report has been generated so that we can have a visual representation.
jacocoTestCoverageVerification.mustRunAfter jacocoTestReport

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

group = 'com.chelseaurquhart'
if (project.hasProperty('release')) {
    version = versionNumber
} else {
    version = "${versionNumber}-${VERSION_SNAPSHOT}"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'secure-json'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'SecureJSON'
                description = 'A secure JSON library.'
                url = 'https://github.com/curquhart/secure-json/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'chelsea'
                        name = 'Chelsea Urquhart'
                        email = 'chelsea.urquhart@rocketsimplicity.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/curquhart/secure-json.git'
                    developerConnection = 'scm:git:ssh://github.com/curquhart/secure-json.git'
                    url = 'https://github.com/curquhart/secure-json/'
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty('remote')) {
                if (project.hasProperty('release')) {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                } else {
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                }
                credentials {
                    username = project.properties['sonatypeUsername']
                    password = project.properties['sonatypePassword']
                }
            } else {
                url = "${buildDir}/maven"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    options.addBooleanOption('html5', true)
    options.addStringOption('tag', 'exclude')
}

clean {
    delete buildDir
}

task cloneJSONTestSuite(type: Exec) {
    group = LifecycleBasePlugin.BUILD_GROUP
    description = 'Clones the JSONTestSuite repository.'

    ext {
        cloneDir = "${buildDir}/JSONTestSuite"
    }

    commandLine 'git', 'clone', 'https://github.com/nst/JSONTestSuite', ext.cloneDir
    outputs.files(cloneDir)
}
cloneJSONTestSuite.mustRunAfter clean

task verifyJSONTestSuite(dependsOn: [cloneJSONTestSuite, compileCliJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the JSONTestSuite test suite against SecureJSON.'

    def jsonFiles = fileTree("${cloneJSONTestSuite.ext.cloneDir}/test_parsing/")
    inputs.files jsonFiles
    doLast {
        javaexec {
            systemProperties['verifyRunMode'] = 'batch'
            classpath sourceSets.main.runtimeClasspath
            classpath sourceSets.cli.runtimeClasspath
            main = 'com.chelseaurquhart.securejson.Verify'
            args = jsonFiles
        }
    }
}
